version: '3.7'

services:
  postgres:
    image: postgres:16.2-alpine3.19
    container_name: db-passin
    hostname: ${POSTGRES_SERVER}
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - 'db:/var/lib/postgresql/data'
      - type: bind
        source: ./init.sql
        target: /docker-entrypoint-initdb.d/init.sql
        read_only: true
    networks:
      - passin

  api-passin:
    build:
      context: .
    container_name: api-passin
    ports:
      - 8080:8080
    depends_on:
      - postgres
    networks:
      - passin
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_SERVER=${POSTGRES_SERVER}

  sonar_db:
      image: postgres:16.2-alpine3.19
      container_name: bd-sonar
      hostname: postgressonar
      environment:
        POSTGRES_USER: sonar
        POSTGRES_PASSWORD: sonar
        POSTGRES_DB: sonar
      volumes:
        - sonar_db:/var/lib/postgresql
        - sonar_db_data:/var/lib/postgresql/data
  
  SonarQube:
    image: sonarqube:community
    container_name: sonarqube
    hostname: sonarqube
    ports:
      - 9001:9000
    environment:
      SONARQUBE_JDBC_URL: jdbc:postgresql://sonar:5432/sonar
      SONAR_JDBC_USERNAME: sonartest
      SONAR_JDBC_PASSWORD: sonartest
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    depends_on:
      - sonar_db
    networks:
      - passin

networks:
  passin:
    driver: bridge

volumes:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:
  db: